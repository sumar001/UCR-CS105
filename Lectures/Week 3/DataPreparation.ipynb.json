{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.7.1"},"colab":{"name":"DataPreparation.ipynb","provenance":[],"toc_visible":true}},"cells":[{"cell_type":"markdown","metadata":{"id":"6CgN0zo3q5Fi","colab_type":"text"},"source":["# Data Preparation for Machine Learning\n","\n","**Data preparation** is a vital step in the machine learning pipeline. Just as visualization is necessary to understand the relationships in data, proper preparation or **data munging** is required to ensure machine learning models work optimally. \n","\n","The process of data preparation is highly interactive and iterative. A typical process includes at least the following steps:\n","1. **Visualization** of the dataset to understand the relationships and identify possible problems with the data.\n","2. **Data cleaning and transformation** to address the problems identified. It many cases, step 1 is then repeated to verify that the cleaning and transformation had the desired effect. \n","3. **Construction and evaluation of a machine learning models**. Visualization of the results will often lead to understanding of further data preparation that is required; going back to step 1. \n","\n","In this module you will learn the following: \n","- Recode character strings to eliminate characters that will not be processed correctly.\n","- Find and treat missing values. \n","- Set correct data type of each column. \n","- Transform categorical features to create categories with more cases and coding likely to be useful in predicting the label. \n","- Apply transformations to numeric features and the label to improve the distribution properties. \n","- Locate and treat duplicate cases. \n","\n","Look at this tutorial : https://towardsdatascience.com/the-tale-of-missing-values-in-python-c96beb0e8a9d\n"]},{"cell_type":"markdown","metadata":{"id":"IDZFljzeq5Fi","colab_type":"text"},"source":["## An example\n","\n","As a first example you will prepare the automotive dataset. Careful preparation of this dataset, or any dataset, is required before atempting to train any machine learning model. This dataset has a number of problems which must be addressed. Further, some feature engineering will be applied. \n","\n","### Load the dataset\n","\n","As a first step you must load the dataset. \n","\n","Execute the code in the cell below to load the packages required  to run this notebook. "]},{"cell_type":"code","metadata":{"id":"Ze34G7baq5Fj","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594063723981,"user_tz":420,"elapsed":413,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}}},"source":["import pandas as pd\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","import numpy as np\n","import numpy.random as nr\n","import math\n","\n","%matplotlib inline"],"execution_count":9,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"ip325D9dq5Fn","colab_type":"text"},"source":["Execute the code in the cell below to load the dataset and print the first few rows of the data frame."]},{"cell_type":"code","metadata":{"id":"maner743q5Fn","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":506},"executionInfo":{"status":"ok","timestamp":1594063726642,"user_tz":420,"elapsed":515,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"cb2c65ba-c8c7-41ac-d6d6-b546c2baeca5"},"source":["auto_prices = pd.read_csv('Automobile_Raw_.csv')\n","auto_prices"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>symboling</th>\n","      <th>normalized-losses</th>\n","      <th>make</th>\n","      <th>fuel-type</th>\n","      <th>aspiration</th>\n","      <th>num-of-doors</th>\n","      <th>body-style</th>\n","      <th>drive-wheels</th>\n","      <th>engine-location</th>\n","      <th>wheel-base</th>\n","      <th>length</th>\n","      <th>width</th>\n","      <th>height</th>\n","      <th>curb-weight</th>\n","      <th>engine-type</th>\n","      <th>num-of-cylinders</th>\n","      <th>engine-size</th>\n","      <th>fuel-system</th>\n","      <th>bore</th>\n","      <th>stroke</th>\n","      <th>compression-ratio</th>\n","      <th>horsepower</th>\n","      <th>peak-rpm</th>\n","      <th>city-mpg</th>\n","      <th>highway-mpg</th>\n","      <th>price</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>?</td>\n","      <td>alfa-romero</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>13495</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3</td>\n","      <td>?</td>\n","      <td>alfa-romero</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>convertible</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>88.6</td>\n","      <td>168.8</td>\n","      <td>64.1</td>\n","      <td>48.8</td>\n","      <td>2548</td>\n","      <td>dohc</td>\n","      <td>four</td>\n","      <td>130</td>\n","      <td>mpfi</td>\n","      <td>3.47</td>\n","      <td>2.68</td>\n","      <td>9.0</td>\n","      <td>111</td>\n","      <td>5000</td>\n","      <td>21</td>\n","      <td>27</td>\n","      <td>16500</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>?</td>\n","      <td>alfa-romero</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>two</td>\n","      <td>hatchback</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>94.5</td>\n","      <td>171.2</td>\n","      <td>65.5</td>\n","      <td>52.4</td>\n","      <td>2823</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>152</td>\n","      <td>mpfi</td>\n","      <td>2.68</td>\n","      <td>3.47</td>\n","      <td>9.0</td>\n","      <td>154</td>\n","      <td>5000</td>\n","      <td>19</td>\n","      <td>26</td>\n","      <td>16500</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>164</td>\n","      <td>audi</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>fwd</td>\n","      <td>front</td>\n","      <td>99.8</td>\n","      <td>176.6</td>\n","      <td>66.2</td>\n","      <td>54.3</td>\n","      <td>2337</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>109</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>10.0</td>\n","      <td>102</td>\n","      <td>5500</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>13950</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2</td>\n","      <td>164</td>\n","      <td>audi</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>4wd</td>\n","      <td>front</td>\n","      <td>99.4</td>\n","      <td>176.6</td>\n","      <td>66.4</td>\n","      <td>54.3</td>\n","      <td>2824</td>\n","      <td>ohc</td>\n","      <td>five</td>\n","      <td>136</td>\n","      <td>mpfi</td>\n","      <td>3.19</td>\n","      <td>3.40</td>\n","      <td>8.0</td>\n","      <td>115</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>22</td>\n","      <td>17450</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>200</th>\n","      <td>-1</td>\n","      <td>95</td>\n","      <td>volvo</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>2952</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>9.5</td>\n","      <td>114</td>\n","      <td>5400</td>\n","      <td>23</td>\n","      <td>28</td>\n","      <td>16845</td>\n","    </tr>\n","    <tr>\n","      <th>201</th>\n","      <td>-1</td>\n","      <td>95</td>\n","      <td>volvo</td>\n","      <td>gas</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.8</td>\n","      <td>55.5</td>\n","      <td>3049</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>8.7</td>\n","      <td>160</td>\n","      <td>5300</td>\n","      <td>19</td>\n","      <td>25</td>\n","      <td>19045</td>\n","    </tr>\n","    <tr>\n","      <th>202</th>\n","      <td>-1</td>\n","      <td>95</td>\n","      <td>volvo</td>\n","      <td>gas</td>\n","      <td>std</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3012</td>\n","      <td>ohcv</td>\n","      <td>six</td>\n","      <td>173</td>\n","      <td>mpfi</td>\n","      <td>3.58</td>\n","      <td>2.87</td>\n","      <td>8.8</td>\n","      <td>134</td>\n","      <td>5500</td>\n","      <td>18</td>\n","      <td>23</td>\n","      <td>21485</td>\n","    </tr>\n","    <tr>\n","      <th>203</th>\n","      <td>-1</td>\n","      <td>95</td>\n","      <td>volvo</td>\n","      <td>diesel</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3217</td>\n","      <td>ohc</td>\n","      <td>six</td>\n","      <td>145</td>\n","      <td>idi</td>\n","      <td>3.01</td>\n","      <td>3.40</td>\n","      <td>23.0</td>\n","      <td>106</td>\n","      <td>4800</td>\n","      <td>26</td>\n","      <td>27</td>\n","      <td>22470</td>\n","    </tr>\n","    <tr>\n","      <th>204</th>\n","      <td>-1</td>\n","      <td>95</td>\n","      <td>volvo</td>\n","      <td>gas</td>\n","      <td>turbo</td>\n","      <td>four</td>\n","      <td>sedan</td>\n","      <td>rwd</td>\n","      <td>front</td>\n","      <td>109.1</td>\n","      <td>188.8</td>\n","      <td>68.9</td>\n","      <td>55.5</td>\n","      <td>3062</td>\n","      <td>ohc</td>\n","      <td>four</td>\n","      <td>141</td>\n","      <td>mpfi</td>\n","      <td>3.78</td>\n","      <td>3.15</td>\n","      <td>9.5</td>\n","      <td>114</td>\n","      <td>5400</td>\n","      <td>19</td>\n","      <td>25</td>\n","      <td>22625</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>205 rows × 26 columns</p>\n","</div>"],"text/plain":["     symboling normalized-losses         make  ... city-mpg highway-mpg  price\n","0            3                 ?  alfa-romero  ...       21          27  13495\n","1            3                 ?  alfa-romero  ...       21          27  16500\n","2            1                 ?  alfa-romero  ...       19          26  16500\n","3            2               164         audi  ...       24          30  13950\n","4            2               164         audi  ...       18          22  17450\n","..         ...               ...          ...  ...      ...         ...    ...\n","200         -1                95        volvo  ...       23          28  16845\n","201         -1                95        volvo  ...       19          25  19045\n","202         -1                95        volvo  ...       18          23  21485\n","203         -1                95        volvo  ...       26          27  22470\n","204         -1                95        volvo  ...       19          25  22625\n","\n","[205 rows x 26 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"markdown","metadata":{"id":"dkyrN8NWq5Fq","colab_type":"text"},"source":["You will now perform some data preparation steps. \n"]},{"cell_type":"markdown","metadata":{"id":"X9YhBcJ-q5Fr","colab_type":"text"},"source":["### Recode names\n","\n","Notice that several of the column names contain the '-' character. Python will not correctly recognize character strings containing '-'.  Rather, such a name will be recognized as two character strings. The same problem will occur with column values containing many special characters including, '-', ',', '*', '/', '|', '>', '<', '@', '!' etc. If such characters appear in column names of values, they must be replaced with another character. \n","\n","Execute the code in the cell below to replace the '-' characters by '_':"]},{"cell_type":"code","metadata":{"id":"yLMAeL9gq5Fr","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":151},"executionInfo":{"status":"ok","timestamp":1594063729494,"user_tz":420,"elapsed":491,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"145a4b69-c88d-452c-f1b5-a43727ac58d6"},"source":["print (auto_prices.columns)\n","print (type(auto_prices.columns))\n","\n","auto_prices.columns = [str.replace('-', '_') for str in auto_prices.columns]\n","\n","\n"],"execution_count":11,"outputs":[{"output_type":"stream","text":["Index(['symboling', 'normalized-losses', 'make', 'fuel-type', 'aspiration',\n","       'num-of-doors', 'body-style', 'drive-wheels', 'engine-location',\n","       'wheel-base', 'length', 'width', 'height', 'curb-weight', 'engine-type',\n","       'num-of-cylinders', 'engine-size', 'fuel-system', 'bore', 'stroke',\n","       'compression-ratio', 'horsepower', 'peak-rpm', 'city-mpg',\n","       'highway-mpg', 'price'],\n","      dtype='object')\n","<class 'pandas.core.indexes.base.Index'>\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"N-vxiY4pq5Fu","colab_type":"code","colab":{},"outputId":"a50661db-284e-4b6b-f760-aa13a48fb196"},"source":["print (list(auto_prices.columns))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["['symboling', 'make', 'fuel_type', 'aspiration', 'num_of_doors', 'body_style', 'drive_wheels', 'engine_location', 'wheel_base', 'length', 'width', 'height', 'curb_weight', 'engine_type', 'num_of_cylinders', 'engine_size', 'fuel_system', 'bore', 'stroke', 'compression_ratio', 'horsepower', 'peak_rpm', 'city_mpg', 'highway_mpg', 'price', 'log_price']\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"ZIaGLBZRq5Fw","colab_type":"text"},"source":["### Treat missing values\n","\n","**Missing values** are a common problem in data set. Failure to deal with missing values before training a machine learning model will lead to biased training at best, and in many cases actual failure. \n","\n","If we plan to build a model on the given data, then we need to deal with missing data because the Python scikit-learn package will not process dataframes / arrays with missing values. \n","\n","There are two problems that must be deal with when treating missing values:\n","1. First you must find the missing values. This can be difficult as there is no standard way missing values are coded. Some common possibilities for missing values are:\n","  - Coded by some particular character string, or numeric value like -999. \n","  - A NULL value or numeric missing value such as a NaN. \n","  \n","2. You must determine how to treat the missing values:\n","  - Remove features with substantial numbers of missing values. In many cases, such features are likely to have little information value. \n","  - Remove rows with missing values. If there are only a few rows with missing values it might be easier and more certain to simply remove them. \n","  - Impute values. Imputation can be done with simple algorithms such as replacing the missing values with the mean or median value. There are also complex statistical methods such as the expectation maximization (EM) or SMOTE algorithms. \n","  - Use nearest neighbor values. Alternatives for nearest neighbor values include, averaging, forward filling or backward filling. \n","  \n","Carefully observe the first few cases from the data frame and notice that missing values are coded with a '?' character. Execute the code in the cell below to identify the columns with missing values."]},{"cell_type":"code","metadata":{"id":"hDmGb3ZTq5Fw","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":470},"executionInfo":{"status":"ok","timestamp":1594063733708,"user_tz":420,"elapsed":598,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"f4cb5ec1-b130-4e09-a2aa-8d133eb6e237"},"source":["(auto_prices.astype(np.object) == '?').any()"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["symboling            False\n","normalized_losses     True\n","make                 False\n","fuel_type            False\n","aspiration           False\n","num_of_doors          True\n","body_style           False\n","drive_wheels         False\n","engine_location      False\n","wheel_base           False\n","length               False\n","width                False\n","height               False\n","curb_weight          False\n","engine_type          False\n","num_of_cylinders     False\n","engine_size          False\n","fuel_system          False\n","bore                  True\n","stroke                True\n","compression_ratio    False\n","horsepower            True\n","peak_rpm              True\n","city_mpg             False\n","highway_mpg          False\n","price                 True\n","dtype: bool"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"markdown","metadata":{"id":"Tz48T2Ycq5Fz","colab_type":"text"},"source":["Execute the code in the cell below to display the data types of each column."]},{"cell_type":"code","metadata":{"id":"XjAvQ_USq5Fz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":470},"executionInfo":{"status":"ok","timestamp":1594063735525,"user_tz":420,"elapsed":422,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"8fad27c5-27ff-4355-aa1c-f56363037076"},"source":["auto_prices.dtypes"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["symboling              int64\n","normalized_losses     object\n","make                  object\n","fuel_type             object\n","aspiration            object\n","num_of_doors          object\n","body_style            object\n","drive_wheels          object\n","engine_location       object\n","wheel_base           float64\n","length               float64\n","width                float64\n","height               float64\n","curb_weight            int64\n","engine_type           object\n","num_of_cylinders      object\n","engine_size            int64\n","fuel_system           object\n","bore                  object\n","stroke                object\n","compression_ratio    float64\n","horsepower            object\n","peak_rpm              object\n","city_mpg               int64\n","highway_mpg            int64\n","price                 object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"markdown","metadata":{"id":"Sga92nw2q5F2","colab_type":"text"},"source":["Compare the columns with missing values to their data types. In all cases, the columns with missing values have an `object` (character) type as a result of using the '?' code. As a result, some columns that should be numeric (bore, stroke, horsepower, peak_rpm, and price) are coded as `object`.\n","\n","The next question is how many missing values are in each of these `object` type columns? Execute the code in the cell below to display the counts of missing values. "]},{"cell_type":"code","metadata":{"id":"zDKWZBU6q5F3","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"ok","timestamp":1594063737772,"user_tz":420,"elapsed":347,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"ab8bcc79-e9ff-44b0-d089-59b211393407"},"source":["for col in auto_prices.columns:\n","    if auto_prices[col].dtype == object:\n","        count = 0\n","        count = [count + 1 for x in auto_prices[col] if x == '?']\n","        print(col + ' ' + str(sum(count)))"],"execution_count":14,"outputs":[{"output_type":"stream","text":["normalized_losses 41\n","make 0\n","fuel_type 0\n","aspiration 0\n","num_of_doors 2\n","body_style 0\n","drive_wheels 0\n","engine_location 0\n","engine_type 0\n","num_of_cylinders 0\n","fuel_system 0\n","bore 4\n","stroke 4\n","horsepower 2\n","peak_rpm 2\n","price 4\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"QaDyKEiqq5F6","colab_type":"text"},"source":["The `normalize_losses` column has a significant number of missing values and will be removed. Columns that should be numeric, but contain missing values, are processed in the following manner:\n","1. The '?' values are computed to Pandas Numpy missing values `nan`.\n","2. Rows containing `nan` values are removed. \n","\n","Execute this code, noticing the resulting shape of the data frame. "]},{"cell_type":"code","metadata":{"id":"4EpUyvHWq5F6","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1594063740562,"user_tz":420,"elapsed":339,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}}},"source":["## Drop column with too many missing values\n","auto_prices.drop('normalized_losses', axis = 1, inplace = True)\n","  "],"execution_count":15,"outputs":[]},{"cell_type":"code","metadata":{"id":"oS-tScG1q5F8","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":34},"executionInfo":{"status":"ok","timestamp":1594063741601,"user_tz":420,"elapsed":574,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"a2f815d2-af9e-4a91-b953-7eee59553577"},"source":["## Remove rows with missing values, accounting for mising values coded as '?'\n","cols = ['price', 'bore', 'stroke','horsepower', 'peak_rpm']\n","\n","for column in cols:\n","    auto_prices.loc[auto_prices[column] == '?', column] = np.nan\n","    auto_prices.dropna(axis = 0, inplace = True)\n","    \n","auto_prices.shape  "],"execution_count":16,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(195, 25)"]},"metadata":{"tags":[]},"execution_count":16}]},{"cell_type":"markdown","metadata":{"id":"FcC7qaFpq5F-","colab_type":"text"},"source":["The data set now contains 195 cases and 25 columns. 10 rows have been dropped by removing missing values. "]},{"cell_type":"markdown","metadata":{"id":"v4IrvMxdq5F_","colab_type":"text"},"source":["### Transform column data type\n","\n","As has been previously noted, there are five columns in this dataset which do not have the correct type as a result of missing values. This is a common situation, as the methods used to automatically determine data type when loading files can fail when missing values are present. \n","\n","The code in the cell below iterates over a list of columns setting them to numeric. Execute this code and observe the resulting  types."]},{"cell_type":"code","metadata":{"id":"0AQZQjWxq5F_","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":118},"executionInfo":{"status":"ok","timestamp":1594063743384,"user_tz":420,"elapsed":526,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"b93e619a-187b-44c4-d1d9-c55b78372e03"},"source":["for column in cols:\n","    auto_prices[column] = pd.to_numeric(auto_prices[column])\n","    \n","auto_prices[cols].dtypes"],"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["price           int64\n","bore          float64\n","stroke        float64\n","horsepower      int64\n","peak_rpm        int64\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"0MM0aFAOq5GC","colab_type":"text"},"source":["### Feature engineering and transforming variables\n","\n","In most cases, machine learning is not done with the raw features. Features are transformed, or combined to form new features in forms which are more predictive. This process is known as **feature engineering**. In many cases, good feature engineering is more important than the details of the machine learning model used. It is often the case that good features can make even poor machine learning models work well, whereas, given poor features even the best machine learning model will produce poor results. As the famous saying goes, \"garbage in, garbage out\".\n","\n","Some common approaches to feature engineering include:\n","- **Aggregating categories** of categorical variables to reduce the number. Categorical features or labels with too many unique categories will limit the predictive power of a machine learning model. Aggregating categories can improve this situation, sometime greatly. However, one must be careful. It only makes sense to aggregate categories that are similar in the domain of the problem. Thus, domain expertise must be applied. \n","- **Transforming numeric variables** to improve their distribution properties to make them more covariate with other variables. This process can be applied not only features, but to labels for regression problems. Some common transformations include, **logarithmic** and **power** included squares and square roots. \n","- **Compute new features** from two or more existing features. These new features are often referred to as **interaction terms**. An interaction occurs when the behavior of say, the produce of the values of two features, is significantly more predictive than the two features by themselves. Consider the probability of purchase for a luxury mens' shoe. This probability depends on the interaction of the user being a man and the buyer being wealthy. As another example, consider the number of expected riders on a bus route. This value will depend on the interaction between the time of day and if it is a holiday. "]},{"cell_type":"markdown","metadata":{"id":"tVHuHIm4q5GC","colab_type":"text"},"source":["#### Aggregating categorical variables\n","\n","When a dataset contains categorical variables these need to be investigated to ensure that each category has sufficient samples. It is commonly the case that some categories may have very few samples, or have so many similar categories as to be meaningless. \n","\n","As a specific case, you will examine the number of cylinders in the cars. Execute the code in the cell below to print a frequency table for this variable and examine the result. "]},{"cell_type":"code","metadata":{"id":"c1jiDPCZq5GC","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":134},"executionInfo":{"status":"ok","timestamp":1594063745655,"user_tz":420,"elapsed":461,"user":{"displayName":"Mariam Salloum","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GjESp3KZ04yLjAJjTVgf3vJym8HDrMI8o-7aIJENA=s64","userId":"08206316293294396347"}},"outputId":"d3f10324-86b1-4ef8-d5e5-3fc62eb68e06"},"source":["auto_prices['num_of_cylinders'].value_counts()"],"execution_count":18,"outputs":[{"output_type":"execute_result","data":{"text/plain":["four      155\n","six        24\n","five       10\n","eight       4\n","twelve      1\n","three       1\n","Name: num_of_cylinders, dtype: int64"]},"metadata":{"tags":[]},"execution_count":18}]},{"cell_type":"markdown","metadata":{"id":"yBsTzlXUq5GE","colab_type":"text"},"source":["Notice that there is only one car with three and twelve cylinders. There are only four cars with eight cylinders, and 10 cars with five cylinders. It is likely that all of these categories will not have statistically significant difference in predicting auto price. It is clear that these categories need to be aggregated. \n","\n","The code in the cell below uses a Python dictionary to recode the number of cylinder categories into a smaller number categories. Execute this code and examine the resulting frequency table."]},{"cell_type":"code","metadata":{"id":"-weU3lfXq5GF","colab_type":"code","colab":{},"outputId":"693afe5d-79a3-4e99-af7c-801e7c6408aa"},"source":["cylinder_categories = {'three':'three_four', 'four':'three_four', \n","                    'five':'five_six', 'six':'five_six',\n","                    'eight':'eight_twelve', 'twelve':'eight_twelve'}\n","\n","auto_prices['num_of_cylinders'] = [cylinder_categories[x] for x in auto_prices['num_of_cylinders']]\n","auto_prices['num_of_cylinders'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["three_four      156\n","five_six         34\n","eight_twelve      5\n","Name: num_of_cylinders, dtype: int64"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"markdown","metadata":{"id":"Ze_0B3e-q5GH","colab_type":"text"},"source":["There are now three categories. One of these categories only has five members. However, it is likely that these autos will have different pricing from others.\n","\n","Next, execute the code in the cell below to make box plots of the new cylinder categories."]},{"cell_type":"code","metadata":{"id":"1NdRcMuEq5GI","colab_type":"code","colab":{},"outputId":"14a1ac08-2db9-42e4-fa06-0e6b01b419d2"},"source":["def plot_box(auto_prices, col, col_y = 'price'):\n","    sns.set_style(\"whitegrid\")\n","    sns.boxplot(col, col_y, data=auto_prices)\n","    plt.xlabel(col) # Set text for the x axis\n","    plt.ylabel(col_y)# Set text for y axis\n","    plt.show()\n","    \n","plot_box(auto_prices, 'num_of_cylinders')    "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"zPVtKZItq5GK","colab_type":"text"},"source":["Indeed, the price range of these categories is distinctive. It is likely that these new categories will be useful in predicting the price of autos. \n","\n","Now, execute the code in the cell below and examine the frequency table for the `body_style` feature."]},{"cell_type":"code","metadata":{"id":"d51_NKN6q5GL","colab_type":"code","colab":{},"outputId":"3c7c7841-ef4f-4ffc-f1c0-ddec65c9c5d9"},"source":["auto_prices['body_style'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sedan          94\n","hatchback      63\n","wagon          24\n","hardtop         8\n","convertible     6\n","Name: body_style, dtype: int64"]},"metadata":{"tags":[]},"execution_count":19}]},{"cell_type":"markdown","metadata":{"id":"mw4Yx6AWq5GN","colab_type":"text"},"source":["Two of these categories have a limited number of cases. These categories can be aggregated to increase the number of cases using a similar approach as used for the number of cylinders. Execute the code in the cell below to aggregate these categories."]},{"cell_type":"code","metadata":{"id":"H7ClgDnZq5GO","colab_type":"code","colab":{},"outputId":"47d44028-72e8-4847-b10d-cce508ec57d5"},"source":["body_cats = {'sedan':'sedan', 'hatchback':'hatchback', 'wagon':'wagon', \n","             'hardtop':'hardtop_convert', 'convertible':'hardtop_convert'}\n","auto_prices['body_style'] = [body_cats[x] for x in auto_prices['body_style']]\n","auto_prices['body_style'].value_counts()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["sedan              94\n","hatchback          63\n","wagon              24\n","hardtop_convert    14\n","Name: body_style, dtype: int64"]},"metadata":{"tags":[]},"execution_count":20}]},{"cell_type":"markdown","metadata":{"id":"LjDFF8enq5GR","colab_type":"text"},"source":["To investigate if this aggregation of categories was a good idea, execute the code in the cell below to display a box plot. \n"]},{"cell_type":"code","metadata":{"id":"p16cD_Wvq5GS","colab_type":"code","colab":{},"outputId":"e98b27db-091f-4f40-c3c8-40bde02efa9e"},"source":["def plot_box(auto_prices, col, col_y = 'price'):\n","    sns.set_style(\"whitegrid\")\n","    sns.boxplot(col, col_y, data=auto_prices)\n","    plt.xlabel(col) # Set text for the x axis\n","    plt.ylabel(col_y)# Set text for y axis\n","    plt.show()\n","    \n","plot_box(auto_prices, 'body_style')    "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"kCuF3caPq5GU","colab_type":"text"},"source":["The `hardtop_convert` category does appear to have values distinct from the other body style. "]},{"cell_type":"markdown","metadata":{"id":"AINEYNBkq5GU","colab_type":"text"},"source":["#### Transforming numeric variables\n","\n","To improve performance of machine learning models transformations of the values are often applied. Typically, transformations are used to make the relationships between variables more linear. In other cases, transformations are performed to make distributions closer to Normal, or at least more symmetric. These transformations can include taking logarithms, exponential transformations and power transformations. \n","\n","In this case, you will transform the label, the price of the car. Execute the code in the cell below to display and examine a histogram of the label. "]},{"cell_type":"code","metadata":{"id":"WvpdWZ9Eq5GV","colab_type":"code","colab":{},"outputId":"b09462ac-0488-4fd3-d259-90887c8cf903"},"source":["def hist_plot(vals, lab):\n","    ## Distribution plot of values\n","    sns.distplot(vals)\n","    plt.title('Histogram of ' + lab)\n","    plt.xlabel('Value')\n","    plt.ylabel('Density')\n","    \n","#labels = np.array(auto_prices['price'])\n","hist_plot(auto_prices['price'], 'prices')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/anaconda3/lib/python3.7/site-packages/scipy/stats/stats.py:1713: FutureWarning: Using a non-tuple sequence for multidimensional indexing is deprecated; use `arr[tuple(seq)]` instead of `arr[seq]`. In the future this will be interpreted as an array index, `arr[np.array(seq)]`, which will result either in an error or a different result.\n","  return np.add.reduce(sorted[indexer] * weights, axis=axis) / sumval\n"],"name":"stderr"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"g5xm4Jg5q5GX","colab_type":"text"},"source":["The distribution of auto price is both quite skewed to the left and multimodal. Given the skew and the fact that there are no values less than or equal to zero, a log transformation might be appropriate.\n","\n","The code in the cell below displays a histogram of the logarithm of prices. Execute this code and examine the result."]},{"cell_type":"code","metadata":{"id":"5BJzpJH_q5GY","colab_type":"code","colab":{},"outputId":"ba0eef87-381f-41ad-ed5c-9bc3faf837ad"},"source":["auto_prices['log_price'] = np.log(auto_prices['price'])\n","hist_plot(auto_prices['log_price'], 'log prices')"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"849TMEtzq5GZ","colab_type":"text"},"source":["The distribution of the logarithm of price is more symmetric, but still shows some multimodal tendency and skew. Nonetheless, this is an improvement so we will use these values as our label.\n","\n","The next question is, how does this transformation change the relationship between the label (price) and some of the features? To find out, execute the code in the cell below. "]},{"cell_type":"code","metadata":{"id":"XSdw6Di0q5Ga","colab_type":"code","colab":{},"outputId":"86c52d3d-72b4-4814-9d4f-60bdffa66354"},"source":["def plot_scatter_shape(auto_prices, cols, shape_col = 'fuel_type', col_y = 'log_price', alpha = 0.2):\n","    shapes = ['+', 'o', 's', 'x', '^'] # pick distinctive shapes\n","    unique_cats = auto_prices[shape_col].unique()\n","    for col in cols: # loop over the columns to plot\n","        sns.set_style(\"whitegrid\")\n","        for i, cat in enumerate(unique_cats): # loop over the unique categories\n","            temp = auto_prices[auto_prices[shape_col] == cat]\n","            sns.regplot(col, col_y, data=temp, marker = shapes[i], label = cat,\n","                        scatter_kws={\"alpha\":alpha}, fit_reg = False, color = 'blue')\n","        plt.title('Scatter plot of ' + col_y + ' vs. ' + col) # Give the plot a main title\n","        plt.xlabel(col) # Set text for the x axis\n","        plt.ylabel(col_y)# Set text for y axis\n","        plt.legend()\n","        plt.show()\n","            \n","num_cols = ['curb_weight', 'engine_size', 'horsepower', 'city_mpg']\n","plot_scatter_shape(auto_prices, num_cols)   "],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"C4GkBYBHq5Ge","colab_type":"text"},"source":["Comparing the results to those obtained in the visualization lab, it does appear that the relationships between curb_weight and log_price and city_mpg and log_price are more linear, compared to the relationships between curb_weight and price and city_mpg and price respectively.\n"]},{"cell_type":"markdown","metadata":{"id":"Gb5CsH2Dq5Gf","colab_type":"text"},"source":["## Another example\n","\n","Next, you will prepare the German credit data. Execute the code in the cell below  to load the dataset and print the head (first 5 rows) of the dataframe."]},{"cell_type":"code","metadata":{"id":"XQS60Kgcq5Gf","colab_type":"code","colab":{},"outputId":"3f31f8b0-4367-4e68-b1cd-826d9bdec5ad"},"source":["credit = pd.read_csv('German_Credit.csv', header=None)\n","credit.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","      <th>...</th>\n","      <th>12</th>\n","      <th>13</th>\n","      <th>14</th>\n","      <th>15</th>\n","      <th>16</th>\n","      <th>17</th>\n","      <th>18</th>\n","      <th>19</th>\n","      <th>20</th>\n","      <th>21</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1122334</td>\n","      <td>A11</td>\n","      <td>6</td>\n","      <td>A34</td>\n","      <td>A43</td>\n","      <td>1169</td>\n","      <td>A65</td>\n","      <td>A75</td>\n","      <td>4</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>67</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>2</td>\n","      <td>A173</td>\n","      <td>1</td>\n","      <td>A192</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6156361</td>\n","      <td>A12</td>\n","      <td>48</td>\n","      <td>A32</td>\n","      <td>A43</td>\n","      <td>5951</td>\n","      <td>A61</td>\n","      <td>A73</td>\n","      <td>2</td>\n","      <td>A92</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>22</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>1</td>\n","      <td>A173</td>\n","      <td>1</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2051359</td>\n","      <td>A14</td>\n","      <td>12</td>\n","      <td>A34</td>\n","      <td>A46</td>\n","      <td>2096</td>\n","      <td>A61</td>\n","      <td>A74</td>\n","      <td>2</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>49</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>1</td>\n","      <td>A172</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8740590</td>\n","      <td>A11</td>\n","      <td>42</td>\n","      <td>A32</td>\n","      <td>A42</td>\n","      <td>7882</td>\n","      <td>A61</td>\n","      <td>A74</td>\n","      <td>2</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A122</td>\n","      <td>45</td>\n","      <td>A143</td>\n","      <td>A153</td>\n","      <td>1</td>\n","      <td>A173</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3924540</td>\n","      <td>A11</td>\n","      <td>24</td>\n","      <td>A33</td>\n","      <td>A40</td>\n","      <td>4870</td>\n","      <td>A61</td>\n","      <td>A73</td>\n","      <td>3</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A124</td>\n","      <td>53</td>\n","      <td>A143</td>\n","      <td>A153</td>\n","      <td>2</td>\n","      <td>A173</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>"],"text/plain":["        0    1   2    3    4     5    6    7   8    9  ...    12  13    14  \\\n","0  1122334  A11   6  A34  A43  1169  A65  A75   4  A93 ...  A121  67  A143   \n","1  6156361  A12  48  A32  A43  5951  A61  A73   2  A92 ...  A121  22  A143   \n","2  2051359  A14  12  A34  A46  2096  A61  A74   2  A93 ...  A121  49  A143   \n","3  8740590  A11  42  A32  A42  7882  A61  A74   2  A93 ...  A122  45  A143   \n","4  3924540  A11  24  A33  A40  4870  A61  A73   3  A93 ...  A124  53  A143   \n","\n","     15 16    17  18    19    20 21  \n","0  A152  2  A173   1  A192  A201  1  \n","1  A152  1  A173   1  A191  A201  2  \n","2  A152  1  A172   2  A191  A201  1  \n","3  A153  1  A173   2  A191  A201  1  \n","4  A153  2  A173   2  A191  A201  2  \n","\n","[5 rows x 22 columns]"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"markdown","metadata":{"id":"xkfq7l1mq5Gh","colab_type":"text"},"source":["This dataset is a bit hard to understand. For a start, the column names are not human readable. "]},{"cell_type":"markdown","metadata":{"id":"LqrUzk9Mq5Gh","colab_type":"text"},"source":["### Recode character strings \n","\n","You have likely noticed that the the column names are  not human readable. This can be changed as was done for the previous dataset. Execute the code in the cell below to add human-readable column names to the data frame. "]},{"cell_type":"code","metadata":{"id":"WISFMKYnq5Gh","colab_type":"code","colab":{},"outputId":"c9109c0e-1c7a-468f-ef37-960979b99190"},"source":["credit.columns = ['customer_id', 'checking_account_status', 'loan_duration_mo', 'credit_history', \n","                  'purpose', 'loan_amount', 'savings_account_balance', \n","                  'time_employed_yrs', 'payment_pcnt_income','gender_status', \n","                  'other_signators', 'time_in_residence', 'property', 'age_yrs',\n","                  'other_credit_outstanding', 'home_ownership', 'number_loans', \n","                  'job_category', 'dependents', 'telephone', 'foreign_worker', \n","                  'bad_credit']\n","credit.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>checking_account_status</th>\n","      <th>loan_duration_mo</th>\n","      <th>credit_history</th>\n","      <th>purpose</th>\n","      <th>loan_amount</th>\n","      <th>savings_account_balance</th>\n","      <th>time_employed_yrs</th>\n","      <th>payment_pcnt_income</th>\n","      <th>gender_status</th>\n","      <th>...</th>\n","      <th>property</th>\n","      <th>age_yrs</th>\n","      <th>other_credit_outstanding</th>\n","      <th>home_ownership</th>\n","      <th>number_loans</th>\n","      <th>job_category</th>\n","      <th>dependents</th>\n","      <th>telephone</th>\n","      <th>foreign_worker</th>\n","      <th>bad_credit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1122334</td>\n","      <td>A11</td>\n","      <td>6</td>\n","      <td>A34</td>\n","      <td>A43</td>\n","      <td>1169</td>\n","      <td>A65</td>\n","      <td>A75</td>\n","      <td>4</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>67</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>2</td>\n","      <td>A173</td>\n","      <td>1</td>\n","      <td>A192</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6156361</td>\n","      <td>A12</td>\n","      <td>48</td>\n","      <td>A32</td>\n","      <td>A43</td>\n","      <td>5951</td>\n","      <td>A61</td>\n","      <td>A73</td>\n","      <td>2</td>\n","      <td>A92</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>22</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>1</td>\n","      <td>A173</td>\n","      <td>1</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2051359</td>\n","      <td>A14</td>\n","      <td>12</td>\n","      <td>A34</td>\n","      <td>A46</td>\n","      <td>2096</td>\n","      <td>A61</td>\n","      <td>A74</td>\n","      <td>2</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A121</td>\n","      <td>49</td>\n","      <td>A143</td>\n","      <td>A152</td>\n","      <td>1</td>\n","      <td>A172</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8740590</td>\n","      <td>A11</td>\n","      <td>42</td>\n","      <td>A32</td>\n","      <td>A42</td>\n","      <td>7882</td>\n","      <td>A61</td>\n","      <td>A74</td>\n","      <td>2</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A122</td>\n","      <td>45</td>\n","      <td>A143</td>\n","      <td>A153</td>\n","      <td>1</td>\n","      <td>A173</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3924540</td>\n","      <td>A11</td>\n","      <td>24</td>\n","      <td>A33</td>\n","      <td>A40</td>\n","      <td>4870</td>\n","      <td>A61</td>\n","      <td>A73</td>\n","      <td>3</td>\n","      <td>A93</td>\n","      <td>...</td>\n","      <td>A124</td>\n","      <td>53</td>\n","      <td>A143</td>\n","      <td>A153</td>\n","      <td>2</td>\n","      <td>A173</td>\n","      <td>2</td>\n","      <td>A191</td>\n","      <td>A201</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>"],"text/plain":["   customer_id checking_account_status  loan_duration_mo credit_history  \\\n","0      1122334                     A11                 6            A34   \n","1      6156361                     A12                48            A32   \n","2      2051359                     A14                12            A34   \n","3      8740590                     A11                42            A32   \n","4      3924540                     A11                24            A33   \n","\n","  purpose  loan_amount savings_account_balance time_employed_yrs  \\\n","0     A43         1169                     A65               A75   \n","1     A43         5951                     A61               A73   \n","2     A46         2096                     A61               A74   \n","3     A42         7882                     A61               A74   \n","4     A40         4870                     A61               A73   \n","\n","   payment_pcnt_income gender_status    ...     property  age_yrs  \\\n","0                    4           A93    ...         A121       67   \n","1                    2           A92    ...         A121       22   \n","2                    2           A93    ...         A121       49   \n","3                    2           A93    ...         A122       45   \n","4                    3           A93    ...         A124       53   \n","\n","  other_credit_outstanding  home_ownership number_loans job_category  \\\n","0                     A143            A152            2         A173   \n","1                     A143            A152            1         A173   \n","2                     A143            A152            1         A172   \n","3                     A143            A153            1         A173   \n","4                     A143            A153            2         A173   \n","\n","   dependents telephone  foreign_worker bad_credit  \n","0           1      A192            A201          1  \n","1           1      A191            A201          2  \n","2           2      A191            A201          1  \n","3           2      A191            A201          1  \n","4           2      A191            A201          2  \n","\n","[5 rows x 22 columns]"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"markdown","metadata":{"id":"d3Yro4CFq5Gk","colab_type":"text"},"source":["Next, there is a trickier problem to deal with. The current coding of the categorical variables is impossible to understand. This makes interpreting these variables nearly impossible.  \n","\n","The code in the cell below uses a list of dictionaries to recode the categorical features with human-readable text. The final dictionary in the list recodes good and bad credit as a binary variable, $\\{ 0,1 \\}$. Two iterators are used to apply the dictionary:\n","1. The `for` loop iterates over the columns and indexes the dictionary for the column. \n","2. A list comprehension iterates of the values in the column and uses the dictionary to map the codes to human-readable category names. \n","\n","Execute this code and examine the result: "]},{"cell_type":"code","metadata":{"scrolled":true,"id":"Gvwe4ze_q5Gk","colab_type":"code","colab":{},"outputId":"27b9f99c-39d0-4f25-9fb7-85c28f24412f"},"source":["code_list = [['checking_account_status', \n","              {'A11' : '< 0 DM', \n","               'A12' : '0 - 200 DM', \n","               'A13' : '> 200 DM or salary assignment', \n","               'A14' : 'none'}],\n","            ['credit_history',\n","            {'A30' : 'no credit - paid', \n","             'A31' : 'all loans at bank paid', \n","             'A32' : 'current loans paid', \n","             'A33' : 'past payment delays', \n","             'A34' : 'critical account - other non-bank loans'}],\n","            ['purpose',\n","            {'A40' : 'car (new)', \n","             'A41' : 'car (used)',\n","             'A42' : 'furniture/equipment',\n","             'A43' : 'radio/television', \n","             'A44' : 'domestic appliances', \n","             'A45' : 'repairs', \n","             'A46' : 'education', \n","             'A47' : 'vacation',\n","             'A48' : 'retraining',\n","             'A49' : 'business', \n","             'A410' : 'other' }],\n","            ['savings_account_balance',\n","            {'A61' : '< 100 DM', \n","             'A62' : '100 - 500 DM', \n","             'A63' : '500 - 1000 DM', \n","             'A64' : '>= 1000 DM',\n","             'A65' : 'unknown/none' }],\n","            ['time_employed_yrs',\n","            {'A71' : 'unemployed',\n","             'A72' : '< 1 year', \n","             'A73' : '1 - 4 years', \n","             'A74' : '4 - 7 years', \n","             'A75' : '>= 7 years'}],\n","            ['gender_status',\n","            {'A91' : 'male-divorced/separated', \n","             'A92' : 'female-divorced/separated/married',\n","             'A93' : 'male-single', \n","             'A94' : 'male-married/widowed', \n","             'A95' : 'female-single'}],\n","            ['other_signators',\n","            {'A101' : 'none', \n","             'A102' : 'co-applicant', \n","             'A103' : 'guarantor'}],\n","            ['property',\n","            {'A121' : 'real estate',\n","             'A122' : 'building society savings/life insurance', \n","             'A123' : 'car or other',\n","             'A124' : 'unknown-none' }],\n","            ['other_credit_outstanding',\n","            {'A141' : 'bank', \n","             'A142' : 'stores', \n","             'A143' : 'none'}],\n","             ['home_ownership',\n","            {'A151' : 'rent', \n","             'A152' : 'own', \n","             'A153' : 'for free'}],\n","            ['job_category',\n","            {'A171' : 'unemployed-unskilled-non-resident', \n","             'A172' : 'unskilled-resident', \n","             'A173' : 'skilled',\n","             'A174' : 'highly skilled'}],\n","            ['telephone', \n","            {'A191' : 'none', \n","             'A192' : 'yes'}],\n","            ['foreign_worker',\n","            {'A201' : 'yes', \n","             'A202' : 'no'}],\n","            ['bad_credit',\n","            {2 : 1,\n","             1 : 0}]]\n","\n","for col_dic in code_list:\n","    col = col_dic[0]\n","    dic = col_dic[1]\n","    credit[col] = [dic[x] for x in credit[col]]\n","    \n","credit.head()    "],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>customer_id</th>\n","      <th>checking_account_status</th>\n","      <th>loan_duration_mo</th>\n","      <th>credit_history</th>\n","      <th>purpose</th>\n","      <th>loan_amount</th>\n","      <th>savings_account_balance</th>\n","      <th>time_employed_yrs</th>\n","      <th>payment_pcnt_income</th>\n","      <th>gender_status</th>\n","      <th>...</th>\n","      <th>property</th>\n","      <th>age_yrs</th>\n","      <th>other_credit_outstanding</th>\n","      <th>home_ownership</th>\n","      <th>number_loans</th>\n","      <th>job_category</th>\n","      <th>dependents</th>\n","      <th>telephone</th>\n","      <th>foreign_worker</th>\n","      <th>bad_credit</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1122334</td>\n","      <td>&lt; 0 DM</td>\n","      <td>6</td>\n","      <td>critical account - other non-bank loans</td>\n","      <td>radio/television</td>\n","      <td>1169</td>\n","      <td>unknown/none</td>\n","      <td>&gt;= 7 years</td>\n","      <td>4</td>\n","      <td>male-single</td>\n","      <td>...</td>\n","      <td>real estate</td>\n","      <td>67</td>\n","      <td>none</td>\n","      <td>own</td>\n","      <td>2</td>\n","      <td>skilled</td>\n","      <td>1</td>\n","      <td>yes</td>\n","      <td>yes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>6156361</td>\n","      <td>0 - 200 DM</td>\n","      <td>48</td>\n","      <td>current loans paid</td>\n","      <td>radio/television</td>\n","      <td>5951</td>\n","      <td>&lt; 100 DM</td>\n","      <td>1 - 4 years</td>\n","      <td>2</td>\n","      <td>female-divorced/separated/married</td>\n","      <td>...</td>\n","      <td>real estate</td>\n","      <td>22</td>\n","      <td>none</td>\n","      <td>own</td>\n","      <td>1</td>\n","      <td>skilled</td>\n","      <td>1</td>\n","      <td>none</td>\n","      <td>yes</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2051359</td>\n","      <td>none</td>\n","      <td>12</td>\n","      <td>critical account - other non-bank loans</td>\n","      <td>education</td>\n","      <td>2096</td>\n","      <td>&lt; 100 DM</td>\n","      <td>4 - 7 years</td>\n","      <td>2</td>\n","      <td>male-single</td>\n","      <td>...</td>\n","      <td>real estate</td>\n","      <td>49</td>\n","      <td>none</td>\n","      <td>own</td>\n","      <td>1</td>\n","      <td>unskilled-resident</td>\n","      <td>2</td>\n","      <td>none</td>\n","      <td>yes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>8740590</td>\n","      <td>&lt; 0 DM</td>\n","      <td>42</td>\n","      <td>current loans paid</td>\n","      <td>furniture/equipment</td>\n","      <td>7882</td>\n","      <td>&lt; 100 DM</td>\n","      <td>4 - 7 years</td>\n","      <td>2</td>\n","      <td>male-single</td>\n","      <td>...</td>\n","      <td>building society savings/life insurance</td>\n","      <td>45</td>\n","      <td>none</td>\n","      <td>for free</td>\n","      <td>1</td>\n","      <td>skilled</td>\n","      <td>2</td>\n","      <td>none</td>\n","      <td>yes</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3924540</td>\n","      <td>&lt; 0 DM</td>\n","      <td>24</td>\n","      <td>past payment delays</td>\n","      <td>car (new)</td>\n","      <td>4870</td>\n","      <td>&lt; 100 DM</td>\n","      <td>1 - 4 years</td>\n","      <td>3</td>\n","      <td>male-single</td>\n","      <td>...</td>\n","      <td>unknown-none</td>\n","      <td>53</td>\n","      <td>none</td>\n","      <td>for free</td>\n","      <td>2</td>\n","      <td>skilled</td>\n","      <td>2</td>\n","      <td>none</td>\n","      <td>yes</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>5 rows × 22 columns</p>\n","</div>"],"text/plain":["   customer_id checking_account_status  loan_duration_mo  \\\n","0      1122334                  < 0 DM                 6   \n","1      6156361              0 - 200 DM                48   \n","2      2051359                    none                12   \n","3      8740590                  < 0 DM                42   \n","4      3924540                  < 0 DM                24   \n","\n","                            credit_history              purpose  loan_amount  \\\n","0  critical account - other non-bank loans     radio/television         1169   \n","1                       current loans paid     radio/television         5951   \n","2  critical account - other non-bank loans            education         2096   \n","3                       current loans paid  furniture/equipment         7882   \n","4                      past payment delays            car (new)         4870   \n","\n","  savings_account_balance time_employed_yrs  payment_pcnt_income  \\\n","0            unknown/none        >= 7 years                    4   \n","1                < 100 DM       1 - 4 years                    2   \n","2                < 100 DM       4 - 7 years                    2   \n","3                < 100 DM       4 - 7 years                    2   \n","4                < 100 DM       1 - 4 years                    3   \n","\n","                       gender_status    ...      \\\n","0                        male-single    ...       \n","1  female-divorced/separated/married    ...       \n","2                        male-single    ...       \n","3                        male-single    ...       \n","4                        male-single    ...       \n","\n","                                  property  age_yrs other_credit_outstanding  \\\n","0                              real estate       67                     none   \n","1                              real estate       22                     none   \n","2                              real estate       49                     none   \n","3  building society savings/life insurance       45                     none   \n","4                             unknown-none       53                     none   \n","\n","   home_ownership number_loans        job_category  dependents telephone  \\\n","0             own            2             skilled           1       yes   \n","1             own            1             skilled           1      none   \n","2             own            1  unskilled-resident           2      none   \n","3        for free            1             skilled           2      none   \n","4        for free            2             skilled           2      none   \n","\n","   foreign_worker bad_credit  \n","0             yes          0  \n","1             yes          1  \n","2             yes          0  \n","3             yes          0  \n","4             yes          1  \n","\n","[5 rows x 22 columns]"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"markdown","metadata":{"id":"wnVA4QSQq5Gm","colab_type":"text"},"source":["The categorical values are now coded in a human readable manner. "]},{"cell_type":"markdown","metadata":{"id":"TgwNEmaVq5Gn","colab_type":"text"},"source":["### Remove duplicate rows\n","\n","Duplicate cases can seriously bias the training of machine learning models. In simple terms, cases which are duplicates add undue weight to that case when training a machine learning model. Therefore, it is necessary to ensure there are no duplicates in the dataset before training a model.  \n","\n","One must be careful when determining if a case is a duplicate or not. It is possible that some cases have identical values, particularly if most or all features are categorical. On the other hand, if there are columns with values guaranteed to be unique these can be used to detect and remove duplicates.\n","\n","Another consideration when removing duplicate cases is determining which case to remove. If the duplicates have different dates of creation, the newest date is often selected. In the absence of such a criteria, the choice is often arbitrary. You may chose to keep the first case or the last case. \n","\n","The German credit data has a customer_id column which should be unique. In the previous lab, we simply remove the customer_id. Turns out, this identifier column will be useful to determine duplicate rows. The presence of duplicates can be determined by comparing the number of rows to the number of unique values of the identifier column, in this case the customer_id column. The code in the cell below prints the shape of the data frame and the number of unique customer_id values. \n"]},{"cell_type":"code","metadata":{"id":"Bx8V94Yeq5Gn","colab_type":"code","colab":{},"outputId":"fa83cfb9-c3f3-44aa-d666-300d559a5648"},"source":["print(credit.shape)\n","print(credit.customer_id.unique().shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1012, 22)\n","(1000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"iOKr4ftDq5Gp","colab_type":"text"},"source":["There are 12 duplicate cases. These need to be located and the duplicates removed. In this case, the first instance will be kept. \n","\n","The code in the cell below removes these duplicates from the data frame inplace and the number of remaining rows and unique customer_ids are printed. Execute this code and examine the results. "]},{"cell_type":"code","metadata":{"scrolled":true,"id":"u4QuVGkNq5Gq","colab_type":"code","colab":{},"outputId":"a9d10f63-7527-47a9-f47b-99785c458f04"},"source":["credit.drop_duplicates(subset = 'customer_id', keep = 'first', inplace = True)\n","print(credit.shape)\n","print(credit.customer_id.unique().shape)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["(1000, 22)\n","(1000,)\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"la3IqxbVq5Gs","colab_type":"text"},"source":["The duplicate rows have been successfully removed. "]},{"cell_type":"code","metadata":{"id":"zRw6lVj7q5Gs","colab_type":"code","colab":{}},"source":["# Let's save the dataframe to a csv file \n","# We will use this in the next module so that we don't have to re-do the steps above\n","# You don't have to run this code as the csv file has been saved under the next module's folder\n","#credit.to_csv('German_Credit_Preped.csv', index = False, header = True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"9IqS9PeOq5Gv","colab_type":"text"},"source":["### Feature engineering\n","\n","Some feature engineering needs to be investigated to determine if any improvement in predictive power can be expected. From the previous data exploration, it is apparent that several of the numeric features had a strong left skew. A log transformation may help in a case like this. \n","\n","Execute the code in the cell below uses the Pandas `applymap` method to apply the `log` function to each element of several columns in the data frame. Execute this code."]},{"cell_type":"code","metadata":{"id":"gaRH0RG_q5Gw","colab_type":"code","colab":{}},"source":["credit[['log_loan_duration_mo', 'log_loan_amount', 'log_age_yrs']] = credit[['loan_duration_mo', 'loan_amount', 'age_yrs']].applymap(math.log)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"3RpICZCQq5Gx","colab_type":"text"},"source":["Next, execute the code in the cell below to visualize the differences in the distributions of the untransformed and transformed variables for the two label values. "]},{"cell_type":"code","metadata":{"scrolled":false,"id":"Is5fw6uQq5Gy","colab_type":"code","colab":{},"outputId":"92776c3e-1270-4e9d-c82c-001e86f7cceb"},"source":["num_cols = ['log_loan_duration_mo', 'log_loan_amount', 'log_age_yrs',\n","                   'loan_duration_mo', 'loan_amount', 'age_yrs']\n","\n","for col in num_cols:\n","    print(col)\n","    _ = plt.figure(figsize = (10,4))\n","    sns.violinplot(x= 'bad_credit', y = col, hue = 'bad_credit', \n","                   data = credit)\n","    plt.ylabel('value')\n","    plt.xlabel(col)\n","    plt.show()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["log_loan_duration_mo\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"Could not interpret input 'log_loan_duration_mo'","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-35-1bea8e69c656>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      6\u001b[0m     \u001b[0m_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m4\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m     sns.violinplot(x= 'bad_credit', y = col, hue = 'bad_credit', \n\u001b[0;32m----> 8\u001b[0;31m                    data = credit)\n\u001b[0m\u001b[1;32m      9\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mylabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'value'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mxlabel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcol\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mviolinplot\u001b[0;34m(x, y, hue, data, order, hue_order, bw, cut, scale, scale_hue, gridsize, width, inner, split, dodge, orient, linewidth, color, palette, saturation, ax, **kwargs)\u001b[0m\n\u001b[1;32m   2385\u001b[0m                              \u001b[0mbw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcut\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale_hue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgridsize\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2386\u001b[0m                              \u001b[0mwidth\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minner\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msplit\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdodge\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlinewidth\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2387\u001b[0;31m                              color, palette, saturation)\n\u001b[0m\u001b[1;32m   2388\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2389\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0max\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, x, y, hue, data, order, hue_order, bw, cut, scale, scale_hue, gridsize, width, inner, split, dodge, orient, linewidth, color, palette, saturation)\u001b[0m\n\u001b[1;32m    560\u001b[0m                  color, palette, saturation):\n\u001b[1;32m    561\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 562\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_variables\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mx\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morient\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0morder\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mhue_order\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    563\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestablish_colors\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcolor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpalette\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msaturation\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    564\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mestimate_densities\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbw\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcut\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscale_hue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgridsize\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/anaconda3/lib/python3.7/site-packages/seaborn/categorical.py\u001b[0m in \u001b[0;36mestablish_variables\u001b[0;34m(self, x, y, hue, data, orient, order, hue_order, units)\u001b[0m\n\u001b[1;32m    153\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mstring_types\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m                     \u001b[0merr\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"Could not interpret input '{}'\"\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minput\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 155\u001b[0;31m                     \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0merr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    156\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    157\u001b[0m             \u001b[0;31m# Figure out the plotting orientation\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: Could not interpret input 'log_loan_duration_mo'"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x288 with 0 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"markdown","metadata":{"id":"V146YGfmq5G0","colab_type":"text"},"source":["The log transformed features have more symmetric distributions. However, it does not appear that the separation of the label cases is improved. These features will not be used further.\n","\n","****\n","**Note:** Recalling the visualization of the categorical features, there are quite a few categories with few cases. However, it is not clear how these categories can be reasonably combined. It may be the case that some of these categorical features are not terribly predictive.\n","****"]},{"cell_type":"markdown","metadata":{"id":"RQkX_XXpq5G0","colab_type":"text"},"source":["## Summary\n","\n","Good data preparation is the key to good machine learning performance. Data preparation or data munging is a time interactive and iterative process. Continue to visualize the results as you test ideas. Expect to try many approaches, reject the ones that do not help, and keep the ones that do. In summary, test a lot of ideas, fail fast, keep what works. The reward is that well prepared data can improve the performance of almost any machine learning algorithm."]}]}